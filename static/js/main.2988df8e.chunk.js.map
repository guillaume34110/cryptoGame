{"version":3,"sources":["composants/depedances/chartConfig.js","data/CryptoList.js","composants/Pages/Menu.js","composants/depedances/gameLoop.js","data/BTC.txt","composants/depedances/txtToObject.js","composants/Pages/Playground.js","App.js","reportWebVitals.js","index.js"],"names":["cryptoChart","cryptolist","Menu","stateDatas","setStateDatas","navigate","useNavigate","useEffect","console","log","clearInterval","className","playerMonney","htmlFor","id","onChange","e","cryptoUnit","target","value","map","crypto","index","onClick","chart","data","tickPriceData","destroy","dataLabel","referenceLine","i","length","push","dataMin","Math","min","max","dataMax","Chart","document","getElementById","type","options","animation","pointBorderWidth","pointRadius","hoverBorderWidth","hoverRadius","scales","xAxis","display","yAxis","grid","drawBorder","ticks","beginAtZero","fontSize","fontColor","maxTicksLimit","padding","yAxis1","position","plugins","legend","tooltip","enabled","mode","labels","datasets","label","borderColor","fill","yAxisID","generateNewDatasAndUpdateChart","currentData","dynamicValues","querySelector","slice","newData","dynamicCurrentPrice","updateCurrentPrice","setCurrentPrice","lastPrice","endGame","interval","fee","a","newFee","playerCrypto","showFile","setCryptoDatas","fetch","texte","then","r","text","bufferText","JSON","parse","randomData","randomValues","array","rnd","random","sellShort","longSell","orderPrice","playerCurrentFee","Playground","useState","cryptoDatas","setPlayerMonney","currentPrice","setSellShort","setLongSell","flagColor","setFlagColor","setPlayerCrypto","setOrderPrice","gain","setGain","drawIndex","setDrawIndex","bufferDatas","loopControler","setInterval","updateFlag","updateGain","width","height","transactionResult","Switch","path","element","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.2988df8e.chunk.js","sourcesContent":["\r\nimport Chart from \"chart.js/auto\"\r\n\r\n let cryptoChart\r\nexport const chart = (data,tickPriceData) => {\r\n    if (cryptoChart )cryptoChart.destroy();\r\n    let dataLabel = []\r\n    let referenceLine = []\r\n\r\n    for (let i = 0; i < data.length; i++) {\r\n        dataLabel.push(i)\r\n        referenceLine.push(tickPriceData)\r\n    }\r\n    let dataMin = Math.min(...data) - (Math.max(...data) / 1000)\r\n    if (dataMin < 0) dataMin = 0\r\n    const dataMax = Math.max(...data) + (Math.max(...data) / 1000)\r\n    //console.log(data, dataMin, dataMax)\r\n    cryptoChart = new Chart(document.getElementById(\"line-chart\"), {\r\n        type: 'line',\r\n\r\n        options: {\r\n            animation: false,\r\n            pointBorderWidth: 0,\r\n            pointRadius: 0,\r\n            hoverBorderWidth: 0,\r\n            hoverRadius: 0,\r\n            scales: {\r\n\r\n                xAxis: {\r\n                    display: false,\r\n                },\r\n\r\n                yAxis: {\r\n                    min:\r\n                        dataMin\r\n                    ,\r\n                    max:\r\n                        dataMax\r\n                    ,\r\n                    grid: {\r\n                        drawBorder: false,\r\n\r\n\r\n                    },\r\n                    ticks: {\r\n                        beginAtZero: false,\r\n                        fontSize: 15,\r\n                        fontColor: 'lightgrey',\r\n                        maxTicksLimit: 5,\r\n                        padding: 25,\r\n                    },\r\n\r\n                },\r\n                yAxis1: {\r\n                    type: 'linear',\r\n                    display: false,\r\n                    position: 'right',\r\n            \r\n                    min:\r\n                        dataMin\r\n                    ,\r\n                    max:\r\n                        dataMax\r\n                   ,\r\n                    grid: {\r\n                        drawBorder: false,\r\n\r\n\r\n                    },\r\n                    ticks: {\r\n                        beginAtZero: false,\r\n                        fontSize: 15,\r\n                        fontColor: 'red',\r\n                        maxTicksLimit: 1,\r\n                        padding: 25,\r\n                    },\r\n\r\n                }\r\n\r\n            },\r\n            plugins: {\r\n                legend: {\r\n                    display: false,\r\n                },\r\n                tooltip: {\r\n                    display: false,\r\n                    enabled: false,\r\n                    mode: 'single',\r\n\r\n                },\r\n            }\r\n        },\r\n        data: {\r\n            labels: dataLabel,\r\n            datasets: [{\r\n                tooltip: false,\r\n                data: data,\r\n                label: \"crytpo\",\r\n                borderColor: \"#3e95cd\",\r\n                fill: false,\r\n                yAxisID: 'yAxis',\r\n            },{\r\n                tooltip: false,\r\n                data: referenceLine,\r\n                label: \"crytpo2\",\r\n                borderColor: \"red\",\r\n                fill: false,\r\n                yAxisID: 'yAxis1',\r\n            }]\r\n            \r\n        },\r\n\r\n    });\r\n}\r\nexport const chartUpdate = (newData,dynamicCurrentPrice) => {\r\n    if (cryptoChart.data) {\r\n        cryptoChart.destroy();\r\n        chart(newData,dynamicCurrentPrice)\r\n    }\r\n}\r\nexport const chartDestroy = () => {\r\n    cryptoChart.destroy();\r\n}","export const cryptolist = [\"bitcoin\",\"ada\",\"ether\",\"bnb\"]","import React, { useEffect,useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { cryptolist } from '../../data/CryptoList';\r\nconst Menu = ({stateDatas , setStateDatas}) => { \r\n    const navigate = useNavigate()\r\n    const selectCrypto = (e) => {\r\n        setStateDatas({playerMonney : stateDatas.playerMonney ,cryptoUnit : e.target.value})\r\n    }\r\n  const playGame = () => {\r\n      navigate('/playground')\r\n  }\r\n  useEffect(() => {\r\n      console.log('what')\r\n    clearInterval()\r\n  }, [])\r\n    return (\r\n        <div className = \"menu\">\r\n             <h1>CryptoGame</h1>\r\n             <div className=\"main-section\">\r\n            <div className = \"left-section\">\r\n                <div>\r\n                <p>Wallet :</p>\r\n                <div><p>{stateDatas.playerMonney}$</p></div>\r\n                </div>\r\n            </div>\r\n            <div>\r\n            <label htmlFor = \"crypto\">Crypto :</label>\r\n                <select id =\"crypto\" onChange ={selectCrypto} >\r\n                ${cryptolist.map((crypto ,  index)=> {\r\n                    return <option key = {index}  value = {crypto}>{crypto}</option>\r\n                })}\r\n                </select>\r\n        </div>\r\n        </div>\r\n        <div className = \"play\" onClick ={playGame}><p>Play</p></div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Menu;\r\n","\r\nimport { chartUpdate } from \"./chartConfig\"\r\n\r\nexport const generateNewDatasAndUpdateChart = (currentData, data, index,dynamicValues) => {\r\n    if ( document.querySelector('.playground-main') ){\r\n    for (let i = index; i < (500 + index); i++) {\r\n        currentData.push(data[i])\r\n    }\r\n    currentData.slice(index, 500 + index)\r\n    chartUpdate(currentData, dynamicValues.tickPriceData)\r\n}\r\n}\r\n\r\nexport const updateCurrentPrice = (currentData, setCurrentPrice, dynamicCurrentPrice) => {\r\n    const lastPrice = currentData[currentData.length - 1]\r\n    dynamicCurrentPrice[0] = lastPrice\r\n    setCurrentPrice(lastPrice)\r\n\r\n}\r\nexport const updateFlag = (dynamicCurrentPrice, dynamicValues, setFlagColor) => {\r\n    if (dynamicValues.longSell === '') {\r\n      \r\n        if (dynamicCurrentPrice[0] > dynamicValues.orderPrice) {\r\n            setFlagColor('green')\r\n        }\r\n        if (dynamicCurrentPrice[0] <= dynamicValues.orderPrice) {\r\n            setFlagColor('red')\r\n        }\r\n    } else if (dynamicValues.sellShort === '') {\r\n        if (dynamicCurrentPrice[0] > dynamicValues.orderPrice) {\r\n            setFlagColor('red')\r\n        }\r\n        if (dynamicCurrentPrice[0] <= dynamicValues.orderPrice) {\r\n            setFlagColor('green')\r\n        }\r\n    } else  {\r\n        setFlagColor('transparent')\r\n    }\r\n}\r\nexport const updateTickPrice = (dynamicValues, dynamicCurrentPrice) => {\r\n    if (dynamicValues.orderPrice === 0) {\r\n        dynamicValues.tickPriceData = dynamicCurrentPrice[0]\r\n    } else {\r\n        dynamicValues.tickPriceData = dynamicValues.orderPrice\r\n    }\r\n\r\n}\r\nexport const updateGain = (setGain ,dynamicCurrentPrice, dynamicValues,fee) => {\r\n    if (dynamicValues.orderPrice > 0 && dynamicValues.longSell === ''){\r\n        setGain(((dynamicCurrentPrice[0]-dynamicValues.orderPrice)*dynamicValues.playerCrypto) - dynamicValues.playerCurrentFee - (dynamicValues.playerCrypto * dynamicCurrentPrice[0] * fee)) \r\n    }else if (dynamicValues.orderPrice > 0 && dynamicValues.sellShort === ''){\r\n        setGain(((dynamicValues.orderPrice - dynamicCurrentPrice[0])*(-dynamicValues.playerCrypto)) - dynamicValues.playerCurrentFee -( - dynamicValues.playerCrypto * dynamicCurrentPrice[0] * fee) )\r\n    }else{\r\n        setGain(0)\r\n    }\r\n\r\n\r\n}\r\nexport const endGame = async (setStateDatas , dynamicValues,navigate ,interval,dynamicCurrentPrice,fee) => {\r\n    if (dynamicValues.playerMonney === 0)  {\r\n        let newFee = (dynamicValues.playerCrypto * dynamicCurrentPrice[0] ) * fee\r\n        dynamicValues.playerMonney = (dynamicValues.playerCrypto * dynamicCurrentPrice[0] ) \r\n        if (dynamicValues.playerMonney < 0 ) dynamicValues.playerMonney = dynamicValues.playerMonney *-1\r\n        dynamicValues.playerMonney = dynamicValues.playerMonney -newFee \r\n    }\r\n    setStateDatas({playerMonney : dynamicValues.playerMonney , cryptoUnit : dynamicValues.cryptoUnit})\r\n    clearInterval(interval)\r\n    navigate('/')\r\n}","export default __webpack_public_path__ + \"static/media/BTC.82585eb7.txt\";","import texte from '../../data/BTC.txt'\r\n\r\nexport const showFile =  async (setCryptoDatas) => {\r\n    fetch(texte)\r\n   .then(r => r.text())\r\n   .then(text => {\r\n     let bufferText =JSON.parse(text)\r\n     randomData(setCryptoDatas , bufferText)\r\n   });\r\n   }\r\n   const randomData = (setCryptoDatas ,bufferText ) => {\r\n     let randomValues = bufferText.array\r\n     let rnd  = Math.random() * (randomValues.length - 10000)\r\n     randomValues = randomValues.slice(rnd  ,rnd + 10000 )\r\n      setCryptoDatas(randomValues)\r\n   }","import React, { useEffect, useState } from 'react';\r\nimport {  useNavigate } from 'react-router-dom';\r\n\r\nimport { chart, chartDestroy } from '../depedances/chartConfig';\r\nimport { endGame, generateNewDatasAndUpdateChart, updateCurrentPrice, updateFlag, updateGain, updateTickPrice } from '../depedances/gameLoop';\r\nimport { showFile } from '../depedances/txtToObject';\r\n\r\nlet index = 0\r\nlet dynamicCurrentPrice = [0]\r\nconst fee = 0.004\r\nlet dynamicValues = { sellShort: 'Buy Short', longSell: 'Buy Long', orderPrice: 0, tickPriceData: 0 ,playerCrypto : 0 , playerCurrentFee : 0 ,playerMonney : 0 ,cryptoUnit : 'btc'}\r\nconst Playground = ({ stateDatas, setStateDatas }) => {\r\n    const [cryptoDatas, setCryptoDatas] = useState()\r\n    const [playerMonney , setPlayerMonney] = useState(0)\r\n    const [currentPrice, setCurrentPrice] = useState(0)\r\n    const [sellShort, setSellShort] = useState('Buy Short')\r\n    const [longSell, setLongSell] = useState('Buy Long')\r\n    const [flagColor, setFlagColor] = useState('transparent')\r\n    const [playerCrypto, setPlayerCrypto] = useState(0)\r\n    const [orderPrice, setOrderPrice] = useState(0)\r\n    const [gain ,setGain] = useState(0)\r\n    const [drawIndex, setDrawIndex ] = useState(0)\r\n    const navigate = useNavigate()\r\n    useEffect(() => {\r\n        showFile(setCryptoDatas)\r\n    }, [])\r\n    useEffect(() => {\r\n        if (cryptoDatas) {\r\n            //console.log(cryptoDatas)\r\n            let bufferDatas = []\r\n            for (let i = 0; i < 500; i++) {\r\n                bufferDatas.push(cryptoDatas[i])\r\n            }\r\n            //onsole.log(bufferDatas)\r\n            index = 0\r\n            setDrawIndex(0)\r\n            updateCurrentPrice(bufferDatas, setCurrentPrice, dynamicCurrentPrice)\r\n            chart(bufferDatas, dynamicCurrentPrice[0])\r\n            //startGameLoop(cryptoDatas)\r\n            dynamicValues.playerMonney = stateDatas.playerMonney\r\n            dynamicValues.cryptoUnit = stateDatas.cryptoUnit\r\n            setPlayerMonney(stateDatas.playerMonney)\r\n            loopControler()\r\n\r\n\r\n        }\r\n    }, [cryptoDatas])\r\n    const loopControler = () => {\r\n        const interval = setInterval(() => {\r\n           // console.log(document.querySelector('.playground-main'))\r\n            if ( !document.querySelector('.playground-main') ){\r\n                chartDestroy()\r\n                clearInterval(interval)\r\n            }\r\n            index++\r\n            setDrawIndex(index)\r\n            let currentData = []\r\n            generateNewDatasAndUpdateChart(currentData, cryptoDatas, index, dynamicValues)\r\n            updateCurrentPrice(currentData, setCurrentPrice, dynamicCurrentPrice)\r\n            updateTickPrice(dynamicValues, dynamicCurrentPrice)\r\n            updateFlag(dynamicCurrentPrice, dynamicValues, setFlagColor)\r\n            updateGain(setGain ,dynamicCurrentPrice, dynamicValues,fee)\r\n           \r\n            if (index >= 10000 ) {\r\n            endGame( setStateDatas , dynamicValues ,navigate ,interval,dynamicCurrentPrice,fee)\r\n            }\r\n           \r\n        }, 200)\r\n        return () => clearInterval(interval);\r\n    }\r\n\r\n    const longOrSell = () => {\r\n        if (dynamicValues.playerMonney > 0) {\r\n            dynamicValues.playerCurrentFee = (stateDatas.playerMonney * fee)\r\n            const transactionResult = (stateDatas.playerMonney - (stateDatas.playerMonney * fee)) / currentPrice\r\n            setPlayerCrypto(transactionResult)\r\n            dynamicValues.playerCrypto = transactionResult\r\n            dynamicValues.playerMonney = 0\r\n            setPlayerMonney(0)\r\n            setSellShort('Sell')\r\n            dynamicValues.sellShort = 'Sell'\r\n            setLongSell('')\r\n            dynamicValues.longSell = ''\r\n            setOrderPrice(currentPrice)\r\n            dynamicValues.orderPrice = currentPrice\r\n        } else if (dynamicValues.playerMonney === 0 && playerCrypto < 0) {\r\n           \r\n            dynamicValues.playerMonney= - (playerCrypto * currentPrice - (playerCrypto * currentPrice * fee))\r\n            setPlayerMonney(dynamicValues.playerMonney)\r\n            setPlayerCrypto(0)\r\n            dynamicValues.playerCrypto = 0\r\n            setSellShort('Buy Short')\r\n            dynamicValues.sellShort = 'Buy Short'\r\n            setLongSell('Buy Long')\r\n            dynamicValues.longSell = 'Buy Long'\r\n            setOrderPrice(0)\r\n            dynamicValues.orderPrice = 0\r\n        }\r\n    }\r\n    const shortOrSell = () => {\r\n        if (dynamicValues.playerMonney === 0 && playerCrypto > 0) {\r\n            \r\n            dynamicValues.playerMonney = playerCrypto * currentPrice - ((playerCrypto * currentPrice) * fee)\r\n            setPlayerMonney(dynamicValues.playerMonney)\r\n            setPlayerCrypto(0)\r\n            dynamicValues.playerCrypto = 0\r\n            setSellShort('Buy Short')\r\n            dynamicValues.sellShort = 'Buy Short'\r\n            setLongSell('Buy Long')\r\n            dynamicValues.longSell = 'Buy Long'\r\n            setOrderPrice(0)\r\n            dynamicValues.orderPrice = 0\r\n        } else if (dynamicValues.playerMonney > 0 && playerCrypto === 0) {\r\n            dynamicValues.playerCurrentFee = (stateDatas.playerMonney * fee)\r\n            const transactionResult =-(stateDatas.playerMonney - (stateDatas.playerMonney * fee)) / currentPrice\r\n            setPlayerCrypto(transactionResult)\r\n            dynamicValues.playerCrypto = transactionResult\r\n            dynamicValues.playerMonney = 0\r\n            setPlayerMonney(0)\r\n            setSellShort('')\r\n            dynamicValues.sellShort = ''\r\n            setLongSell('Sell')\r\n            dynamicValues.longSell = 'Sell'\r\n            setOrderPrice(currentPrice)\r\n            dynamicValues.orderPrice = currentPrice\r\n        }\r\n    }\r\n    return (\r\n        <main className=\" playground-main\">\r\n            <section>\r\n                <div>\r\n                    <h2 className=\"current-price\">current price :{currentPrice}$</h2>\r\n                    <h2 className={\"order \" + flagColor}  >Order at : {orderPrice}</h2>\r\n                    <h2 className = \"gain\" >Gain : {gain}$</h2>\r\n                </div>\r\n                <div>\r\n                    <h2 className=\"user-money\">monney : {playerMonney} $ / {playerCrypto} {stateDatas.cryptoUnit}</h2>\r\n                    <h2> fee : 0.004% </h2>\r\n                    <h2 className=\"index\">{drawIndex}/10000</h2>\r\n                </div>\r\n            </section>\r\n            <div className=\"chart\">\r\n                <canvas id=\"line-chart\" width=\"800\" height=\"450\"></canvas>\r\n            </div>\r\n            <section className=\"buy-sell\">\r\n                <div className=\"sell-btn btn\" onClick={longOrSell}>{longSell}</div>\r\n                <div className=\"buy-btn btn\" onClick={shortOrSell}>{sellShort}</div>\r\n            </section>\r\n\r\n        </main>\r\n    );\r\n}\r\n\r\nexport default Playground;\r\n","import React, { useState } from 'react';\nimport{\n  BrowserRouter,\nRoutes,\nRoute,\nHashRouter,\n} from \"react-router-dom\";\nimport Menu from './composants/Pages/Menu';\nimport Playground from './composants/Pages/Playground';\nimport './style/style.css'\n\nexport const Switch = () => {\n  const [stateDatas , setStateDatas] = useState({playerMonney : 1000 ,cryptoUnit : 'btc'}) //state data array for entire application\n  return (\n      <>\n      <Routes>\n        <Route path=\"/\" element={<Menu stateDatas={stateDatas} setStateDatas ={setStateDatas} />} />\n        <Route path=\"/playground\" element={<Playground  stateDatas={stateDatas} setStateDatas ={setStateDatas}  />} />\n      </Routes>\n      </>\n  )\n};\nfunction App() {\n  \n  return (\n    <HashRouter>\n      <Switch />\n    </HashRouter>\n  );\n}\n\nexport default App;\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
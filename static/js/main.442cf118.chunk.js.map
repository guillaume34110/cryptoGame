{"version":3,"sources":["composants/depedances/chartConfig.js","data/CryptoList.js","composants/Pages/Menu.js","composants/depedances/gameLoop.js","data/BTC.txt","data/ADA.txt","data/BNB.txt","data/ETH.txt","data/SOL.txt","data/XRP.txt","composants/depedances/txtToObject.js","composants/Pages/Playground.js","App.js","reportWebVitals.js","index.js"],"names":["cryptoChart","cryptolist","startSoft","Menu","stateDatas","setStateDatas","navigate","useNavigate","useEffect","playerMonney","window","localStorage","setItem","console","log","getItem","cryptoUnit","className","htmlFor","id","onChange","e","target","value","map","crypto","index","onClick","chart","data","tickPriceData","destroy","dataLabel","referenceLine","i","length","push","dataMin","Math","min","max","dataMax","Chart","document","getElementById","type","options","animation","pointBorderWidth","pointRadius","hoverBorderWidth","hoverRadius","scales","xAxis","display","yAxis","grid","drawBorder","ticks","beginAtZero","fontSize","fontColor","maxTicksLimit","padding","yAxis1","position","plugins","legend","tooltip","enabled","mode","labels","datasets","label","borderColor","fill","yAxisID","generateNewDatasAndUpdateChart","currentData","dynamicValues","querySelector","slice","newData","dynamicCurrentPrice","updateCurrentPrice","setCurrentPrice","lastPrice","currentPrice","endGame","interval","a","newFee","playerCrypto","fee","clearInterval","showFile","setCryptoDatas","cryptoData","BTC","ADA","BNB","ETH","SOL","XRP","fetch","then","r","text","bufferText","JSON","parse","randomData","randomValues","array","rnd","random","sellShort","longSell","orderPrice","playerCurrentFee","Playground","useState","cryptoDatas","setPlayerMonney","setSellShort","setLongSell","flagColor","setFlagColor","setPlayerCrypto","setOrderPrice","gain","setGain","drawIndex","setDrawIndex","bufferDatas","loopControler","setInterval","updateFlag","updateGain","width","height","transactionResult","Switch","path","element","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.442cf118.chunk.js","sourcesContent":["\r\nimport Chart from \"chart.js/auto\"\r\n\r\n let cryptoChart\r\nexport const chart = (data,tickPriceData) => {\r\n    if (cryptoChart )cryptoChart.destroy();\r\n    let dataLabel = []\r\n    let referenceLine = []\r\n\r\n    for (let i = 0; i < data.length; i++) {\r\n        dataLabel.push(i)\r\n        referenceLine.push(tickPriceData)\r\n    }\r\n    let dataMin = Math.min(...data) - (Math.max(...data) / 1000)\r\n    if (dataMin < 0) dataMin = 0\r\n    const dataMax = Math.max(...data) + (Math.max(...data) / 1000)\r\n    cryptoChart = new Chart(document.getElementById(\"line-chart\"), {\r\n        type: 'line',\r\n        options: {\r\n            animation: false,\r\n            pointBorderWidth: 0,\r\n            pointRadius: 0,\r\n            hoverBorderWidth: 0,\r\n            hoverRadius: 0,\r\n            scales: {\r\n\r\n                xAxis: {\r\n                    display: false,\r\n                },\r\n\r\n                yAxis: {\r\n                    min:\r\n                        dataMin\r\n                    ,\r\n                    max:\r\n                        dataMax\r\n                    ,\r\n                    grid: {\r\n                        drawBorder: false,\r\n\r\n\r\n                    },\r\n                    ticks: {\r\n                        beginAtZero: false,\r\n                        fontSize: 15,\r\n                        fontColor: 'lightgrey',\r\n                        maxTicksLimit: 5,\r\n                        padding: 25,\r\n                    },\r\n\r\n                },\r\n                yAxis1: {\r\n                    type: 'linear',\r\n                    display: false,\r\n                    position: 'right',\r\n            \r\n                    min:\r\n                        dataMin\r\n                    ,\r\n                    max:\r\n                        dataMax\r\n                   ,\r\n                    grid: {\r\n                        drawBorder: false,\r\n\r\n\r\n                    },\r\n                    ticks: {\r\n                        beginAtZero: false,\r\n                        fontSize: 15,\r\n                        fontColor: 'red',\r\n                        maxTicksLimit: 1,\r\n                        padding: 25,\r\n                    },\r\n\r\n                }\r\n\r\n            },\r\n            plugins: {\r\n                legend: {\r\n                    display: false,\r\n                },\r\n                tooltip: {\r\n                    display: false,\r\n                    enabled: false,\r\n                    mode: 'single',\r\n\r\n                },\r\n            }\r\n        },\r\n        data: {\r\n            labels: dataLabel,\r\n            datasets: [{\r\n                tooltip: false,\r\n                data: data,\r\n                label: \"crytpo\",\r\n                borderColor: \"#3e95cd\",\r\n                fill: false,\r\n                yAxisID: 'yAxis',\r\n            },{\r\n                tooltip: false,\r\n                data: referenceLine,\r\n                label: \"crytpo2\",\r\n                borderColor: \"red\",\r\n                fill: false,\r\n                yAxisID: 'yAxis1',\r\n            }]\r\n            \r\n        },\r\n\r\n    });\r\n}\r\nexport const chartUpdate = (newData,dynamicCurrentPrice) => {\r\n    if (cryptoChart.data) {\r\n        cryptoChart.destroy();\r\n        chart(newData,dynamicCurrentPrice)\r\n    }\r\n}\r\nexport const chartDestroy = () => {\r\n    cryptoChart.destroy();\r\n}","export const cryptolist = [\"Bitcoin\",\"ADA\",\"Ether\",\"BNB\",\"Solana\",'XRP',]","import React, { useEffect,useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { cryptolist } from '../../data/CryptoList';\r\n\r\nlet startSoft = false\r\nconst Menu = ({stateDatas , setStateDatas}) => { \r\n    const navigate = useNavigate()\r\n    const selectCrypto = (e) => {\r\n        setStateDatas({playerMonney : stateDatas.playerMonney ,cryptoUnit : e.target.value})\r\n    }\r\n  const playGame = () => {\r\n      navigate('/playground')\r\n  }\r\nuseEffect(() => {\r\n    let playerMonney = 0\r\n    if (!startSoft){\r\n        startSoft = true\r\n        console.log(window.localStorage)\r\n    let localStorage = window.localStorage.getItem('myWallet')\r\n    if (!localStorage) window.localStorage.setItem('myWallet',stateDatas.playerMonney)\r\n    else {\r\n        setStateDatas({playerMonney : localStorage ,cryptoUnit : stateDatas.cryptoUnit}) \r\n        playerMonney = localStorage\r\n    }\r\n}else{\r\n    window.localStorage.setItem('myWallet',stateDatas.playerMonney)\r\n    playerMonney = stateDatas.playerMonney\r\n}\r\nif (playerMonney === 0) {\r\n    setStateDatas({playerMonney : 1000 ,cryptoUnit : stateDatas.cryptoUnit})\r\n    window.localStorage.setItem('myWallet',1000)\r\n}\r\n}, [])\r\n    return (\r\n        <div className = \"menu\">\r\n             <h1>CryptoGame</h1>\r\n             <div className=\"main-section\">\r\n            <div className = \"left-section\">\r\n                <div>\r\n                <p>Wallet :</p>\r\n                <div><p>{stateDatas.playerMonney}$</p></div>\r\n                </div>\r\n            </div>\r\n            <div>\r\n            <label htmlFor = \"crypto\">Crypto :</label>\r\n                <select id =\"crypto\" onChange ={selectCrypto} >\r\n                ${cryptolist.map((crypto ,  index)=> {\r\n                    return <option key = {index}  value = {crypto}>{crypto}</option>\r\n                })}\r\n                </select>\r\n        </div>\r\n        </div>\r\n        <div className = \"play\" onClick ={playGame}><p>Play</p></div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Menu;\r\n","\r\nimport { chartUpdate } from \"./chartConfig\"\r\n\r\nexport const generateNewDatasAndUpdateChart = (currentData, data, dynamicValues) => {\r\n    if (document.querySelector('.playground-main')) {\r\n        for (let i = dynamicValues.index; i < (500 + dynamicValues.index); i++) {\r\n            currentData.push(data[i])\r\n        }\r\n        currentData.slice(dynamicValues.index, 500 + dynamicValues.index)\r\n        chartUpdate(currentData, dynamicValues.tickPriceData)\r\n    }\r\n}\r\n\r\nexport const updateCurrentPrice = (currentData, setCurrentPrice, dynamicValues) => {\r\n    const lastPrice = currentData[currentData.length - 1]\r\n    dynamicValues.currentPrice = lastPrice\r\n    setCurrentPrice(lastPrice)\r\n\r\n}\r\nexport const updateFlag = (dynamicValues, setFlagColor) => {\r\n    if (dynamicValues.longSell === '') {\r\n\r\n        if (dynamicValues.currentPrice > dynamicValues.orderPrice) {\r\n            setFlagColor('green')\r\n        }\r\n        if (dynamicValues.currentPrice <= dynamicValues.orderPrice) {\r\n            setFlagColor('red')\r\n        }\r\n    } else if (dynamicValues.sellShort === '') {\r\n        if (dynamicValues.currentPrice > dynamicValues.orderPrice) {\r\n            setFlagColor('red')\r\n        }\r\n        if (dynamicValues.currentPrice <= dynamicValues.orderPrice) {\r\n            setFlagColor('green')\r\n        }\r\n    } else {\r\n        setFlagColor('transparent')\r\n    }\r\n}\r\nexport const updateTickPrice = (dynamicValues) => {\r\n    if (dynamicValues.orderPrice === 0) {\r\n        dynamicValues.tickPriceData = dynamicValues.currentPrice\r\n    } else {\r\n        dynamicValues.tickPriceData = dynamicValues.orderPrice\r\n    }\r\n\r\n}\r\nexport const updateGain = (setGain, dynamicValues) => {\r\n    if (dynamicValues.orderPrice > 0 && dynamicValues.longSell === '') {\r\n        setGain(((dynamicValues.currentPrice - dynamicValues.orderPrice) * dynamicValues.playerCrypto) - dynamicValues.playerCurrentFee - (dynamicValues.playerCrypto * dynamicValues.currentPrice * dynamicValues.fee))\r\n    } else if (dynamicValues.orderPrice > 0 && dynamicValues.sellShort === '') {\r\n        setGain(((dynamicValues.orderPrice - dynamicValues.currentPrice) * (-dynamicValues.playerCrypto)) - dynamicValues.playerCurrentFee - (- dynamicValues.playerCrypto * dynamicValues.currentPrice * dynamicValues.fee))\r\n    } else {\r\n        setGain(0)\r\n    }\r\n}\r\nexport const endGame = async (setStateDatas, dynamicValues, navigate, interval) => {\r\n    if (dynamicValues.playerMonney === 0) {\r\n        let newFee = (dynamicValues.playerCrypto * dynamicValues.currentPrice) * dynamicValues.fee\r\n        dynamicValues.playerMonney = (dynamicValues.playerCrypto * dynamicValues.currentPrice)\r\n        if (dynamicValues.playerMonney < 0) dynamicValues.playerMonney = dynamicValues.playerMonney * -1\r\n        dynamicValues.playerMonney = dynamicValues.playerMonney - newFee\r\n    }\r\n    setStateDatas({ playerMonney: dynamicValues.playerMonney, cryptoUnit: dynamicValues.cryptoUnit })\r\n    if (interval)clearInterval(interval)\r\n    navigate('/')\r\n}","export default __webpack_public_path__ + \"static/media/BTC.82585eb7.txt\";","export default __webpack_public_path__ + \"static/media/ADA.8e5834d5.txt\";","export default __webpack_public_path__ + \"static/media/BNB.f42ca6e8.txt\";","export default __webpack_public_path__ + \"static/media/ETH.1269a9e2.txt\";","export default __webpack_public_path__ + \"static/media/SOL.360b1f16.txt\";","export default __webpack_public_path__ + \"static/media/XRP.4f902e13.txt\";","import BTC from '../../data/BTC.txt'\r\nimport ADA from '../../data/ADA.txt'\r\nimport BNB from '../../data/BNB.txt'\r\nimport ETH from '../../data/ETH.txt'\r\nimport SOL from '../../data/SOL.txt'\r\nimport XRP from '../../data/XRP.txt'\r\n\r\nexport const showFile =  async (setCryptoDatas,cryptoUnit ) => {\r\n  let cryptoData \r\n  console.log(cryptoUnit)\r\n  if (cryptoUnit === 'bitcoin' )cryptoData  = BTC\r\n  else if (cryptoUnit === 'ADA')cryptoData  = ADA\r\n  else if (cryptoUnit === 'BNB')cryptoData  = BNB\r\n  else if (cryptoUnit === 'Ether')cryptoData  = ETH\r\n  else if (cryptoUnit === 'Solana')cryptoData = SOL\r\n  else if (cryptoUnit === 'XRP')cryptoData = XRP\r\n\r\n    fetch(cryptoData )\r\n   .then(r => r.text())\r\n   .then(text => {\r\n     let bufferText =JSON.parse(text)\r\n     randomData(setCryptoDatas , bufferText)\r\n   });\r\n   }\r\n   const randomData = (setCryptoDatas ,bufferText ) => {\r\n     let randomValues = bufferText.array\r\n     let rnd  = Math.random() * (randomValues.length - 10000)\r\n     randomValues = randomValues.slice(rnd  ,rnd + 10000 )\r\n      setCryptoDatas(randomValues)\r\n   }","import React, { useEffect, useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nimport { chart, chartDestroy } from '../depedances/chartConfig';\r\nimport { endGame, generateNewDatasAndUpdateChart, updateCurrentPrice, updateFlag, updateGain, updateTickPrice } from '../depedances/gameLoop';\r\nimport { showFile } from '../depedances/txtToObject';\r\n\r\n\r\nlet dynamicValues = { fee: 0.004, currentPrice: 0, index: 0, sellShort: 'Buy Short', longSell: 'Buy Long', orderPrice: 0, tickPriceData: 0, playerCrypto: 0, playerCurrentFee: 0, playerMonney: 0, cryptoUnit: 'btc' }\r\nconst Playground = ({ stateDatas, setStateDatas }) => {\r\n    const [cryptoDatas, setCryptoDatas] = useState()\r\n    const [playerMonney, setPlayerMonney] = useState(0)\r\n    const [currentPrice, setCurrentPrice] = useState(0)\r\n    const [sellShort, setSellShort] = useState('Buy Short')\r\n    const [longSell, setLongSell] = useState('Buy Long')\r\n    const [flagColor, setFlagColor] = useState('transparent')\r\n    const [playerCrypto, setPlayerCrypto] = useState(0)\r\n    const [orderPrice, setOrderPrice] = useState(0)\r\n    const [gain, setGain] = useState(0)\r\n    const [drawIndex, setDrawIndex] = useState(0)\r\n    const navigate = useNavigate()\r\n    useEffect(() => {\r\n        showFile(setCryptoDatas,stateDatas.cryptoUnit)\r\n    }, [])\r\n    useEffect(() => {\r\n        if (cryptoDatas) {\r\n            let bufferDatas = []\r\n            for (let i = 0; i < 500; i++) {\r\n                bufferDatas.push(cryptoDatas[i])\r\n            }\r\n            dynamicValues.index = 0\r\n            setDrawIndex(0)\r\n            updateCurrentPrice(bufferDatas, setCurrentPrice, dynamicValues)\r\n            chart(bufferDatas, dynamicValues.currentPrice)\r\n            dynamicValues.playerMonney = stateDatas.playerMonney\r\n            dynamicValues.cryptoUnit = stateDatas.cryptoUnit\r\n            setPlayerMonney(stateDatas.playerMonney)\r\n            loopControler()\r\n        }\r\n    }, [cryptoDatas])\r\n    const loopControler = () => {\r\n        const interval = setInterval(() => {\r\n            if (!document.querySelector('.playground-main')) {\r\n                chartDestroy()\r\n                clearInterval(interval)\r\n            }\r\n            dynamicValues.index++\r\n            setDrawIndex(dynamicValues.index)\r\n            let currentData = []\r\n            generateNewDatasAndUpdateChart(currentData, cryptoDatas, dynamicValues)\r\n            updateCurrentPrice(currentData, setCurrentPrice, dynamicValues)\r\n            updateTickPrice(dynamicValues)\r\n            updateFlag(dynamicValues, setFlagColor)\r\n            updateGain(setGain, dynamicValues)\r\n            if (dynamicValues.index >= 10000) {\r\n                endGame(setStateDatas, dynamicValues, navigate, interval)\r\n            }\r\n        }, 200)\r\n        return () => clearInterval(interval);\r\n    }\r\n\r\n    const longOrSell = () => {\r\n        if (dynamicValues.playerMonney > 0) {\r\n            dynamicValues.playerCurrentFee = (stateDatas.playerMonney * dynamicValues.fee)\r\n            const transactionResult = (stateDatas.playerMonney - (stateDatas.playerMonney * dynamicValues.fee)) / currentPrice\r\n            setPlayerCrypto(transactionResult)\r\n            dynamicValues.playerCrypto = transactionResult\r\n            dynamicValues.playerMonney = 0\r\n            setPlayerMonney(0)\r\n            setSellShort('Sell')\r\n            dynamicValues.sellShort = 'Sell'\r\n            setLongSell('')\r\n            dynamicValues.longSell = ''\r\n            setOrderPrice(currentPrice)\r\n            dynamicValues.orderPrice = currentPrice\r\n        } else if (dynamicValues.playerMonney === 0 && playerCrypto < 0) {\r\n            dynamicValues.playerMonney = - (playerCrypto * currentPrice - (playerCrypto * currentPrice * dynamicValues.fee))\r\n            setPlayerMonney(dynamicValues.playerMonney)\r\n            setPlayerCrypto(0)\r\n            dynamicValues.playerCrypto = 0\r\n            setSellShort('Buy Short')\r\n            dynamicValues.sellShort = 'Buy Short'\r\n            setLongSell('Buy Long')\r\n            dynamicValues.longSell = 'Buy Long'\r\n            setOrderPrice(0)\r\n            dynamicValues.orderPrice = 0\r\n        }\r\n    }\r\n    const shortOrSell = () => {\r\n        if (dynamicValues.playerMonney === 0 && playerCrypto > 0) {\r\n            dynamicValues.playerMonney = playerCrypto * currentPrice - ((playerCrypto * currentPrice) * dynamicValues.fee)\r\n            setPlayerMonney(dynamicValues.playerMonney)\r\n            setPlayerCrypto(0)\r\n            dynamicValues.playerCrypto = 0\r\n            setSellShort('Buy Short')\r\n            dynamicValues.sellShort = 'Buy Short'\r\n            setLongSell('Buy Long')\r\n            dynamicValues.longSell = 'Buy Long'\r\n            setOrderPrice(0)\r\n            dynamicValues.orderPrice = 0\r\n        } else if (dynamicValues.playerMonney > 0 && playerCrypto === 0) {\r\n            dynamicValues.playerCurrentFee = (stateDatas.playerMonney * dynamicValues.fee)\r\n            const transactionResult = -(stateDatas.playerMonney - (stateDatas.playerMonney * dynamicValues.fee)) / currentPrice\r\n            setPlayerCrypto(transactionResult)\r\n            dynamicValues.playerCrypto = transactionResult\r\n            dynamicValues.playerMonney = 0\r\n            setPlayerMonney(0)\r\n            setSellShort('')\r\n            dynamicValues.sellShort = ''\r\n            setLongSell('Sell')\r\n            dynamicValues.longSell = 'Sell'\r\n            setOrderPrice(currentPrice)\r\n            dynamicValues.orderPrice = currentPrice\r\n        }\r\n    }\r\n    const returnMenu = () => {\r\n        endGame(setStateDatas, dynamicValues, navigate)\r\n    }\r\n    return (\r\n        <main className=\" playground-main\">\r\n            <section>\r\n                <div>\r\n                    <h2 className=\"current-price\">current price :{currentPrice}$</h2>\r\n                    <h2 className={\"order \" + flagColor}  >Order at : {orderPrice}</h2>\r\n                    <h2 className=\"gain\" >Gain : {gain}$</h2>\r\n                </div>\r\n                <div>\r\n                    <h2 className=\"user-money\">monney : {playerMonney} $ / {playerCrypto} {stateDatas.cryptoUnit}</h2>\r\n                    <h2> fee : 0.004% </h2>\r\n                    <h2 className=\"index\">{drawIndex}/10000</h2>\r\n                </div>\r\n            </section>\r\n            <div className=\"chart\">\r\n                <canvas id=\"line-chart\" width=\"800\" height=\"450\"></canvas>\r\n            </div>\r\n            <section className=\"buy-sell\">\r\n                <div className=\"sell-btn btn\" onClick={longOrSell}>{longSell}</div>\r\n                <div className=\"return-btn btn\" onClick={returnMenu}>Menu</div>\r\n                <div className=\"buy-btn btn\" onClick={shortOrSell}>{sellShort}</div>\r\n            </section>\r\n        </main>\r\n    );\r\n}\r\n\r\nexport default Playground;\r\n","import React, { useState } from 'react';\nimport{\n  BrowserRouter,\nRoutes,\nRoute,\nHashRouter,\n} from \"react-router-dom\";\nimport Menu from './composants/Pages/Menu';\nimport Playground from './composants/Pages/Playground';\nimport './style/style.css'\n\nexport const Switch = () => {\n  const [stateDatas , setStateDatas] = useState({playerMonney : 1000 ,cryptoUnit : 'bitcoin'}) //state data array for entire application\n  return (\n      <>\n      <Routes>\n        <Route path=\"/\" element={<Menu stateDatas={stateDatas} setStateDatas ={setStateDatas} />} />\n        <Route path=\"/playground\" element={<Playground  stateDatas={stateDatas} setStateDatas ={setStateDatas}  />} />\n      </Routes>\n      </>\n  )\n};\nfunction App() {\n  \n  return (\n    <HashRouter>\n      <Switch />\n    </HashRouter>\n  );\n}\n\nexport default App;\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
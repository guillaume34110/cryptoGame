{"version":3,"sources":["composants/depedances/chartConfig.js","data/CryptoList.js","composants/depedances/gameLoop.js","data/BTC.txt","data/ADA.txt","data/BNB.txt","data/ETH.txt","data/SOL.txt","data/XRP.txt","composants/depedances/txtToObject.js","composants/Pages/Menu.js","composants/Pages/Playground.js","App.js","reportWebVitals.js","index.js"],"names":["cryptoChart","cryptolist","chart","data","tickPriceData","destroy","dataLabel","referenceLine","i","length","push","dataMin","Math","min","max","dataMax","Chart","document","getElementById","type","options","animation","pointBorderWidth","pointRadius","hoverBorderWidth","hoverRadius","scales","xAxis","display","yAxis","grid","drawBorder","ticks","beginAtZero","fontSize","fontColor","maxTicksLimit","padding","yAxis1","position","plugins","legend","tooltip","enabled","mode","labels","datasets","label","borderColor","fill","yAxisID","chartDestroy","generateNewDatasAndUpdateChart","currentData","dynamicValues","querySelector","index","slice","newData","dynamicCurrentPrice","updateCurrentPrice","setCurrentPrice","lastPrice","currentPrice","endGame","setStateDatas","navigate","interval","a","playerMonney","newFee","playerCrypto","fee","cryptoUnit","clearInterval","showFile","setCryptoDatas","console","log","cryptoData","BTC","ADA","BNB","ETH","SOL","XRP","fetch","then","r","text","bufferText","JSON","parse","randomData","randomValues","array","rnd","random","startSoft","Menu","stateDatas","useState","cryptoDatas","useNavigate","useEffect","window","localStorage","setItem","getItem","bufferDatas","loopControler","setInterval","className","htmlFor","id","onChange","e","target","value","map","crypto","onClick","sellShort","longSell","orderPrice","playerCurrentFee","Playground","setPlayerMonney","setSellShort","setLongSell","flagColor","setFlagColor","setPlayerCrypto","setOrderPrice","gain","setGain","drawIndex","setDrawIndex","updateFlag","updateGain","width","height","transactionResult","Switch","path","element","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"uIAGKA,E,uDCHQC,EAAa,CAAC,UAAU,MAAM,QAAQ,MAAM,SAAS,O,eDIrDC,EAAQ,SAACC,EAAKC,GACnBJ,GAAaA,EAAYK,UAI7B,IAHA,IAAIC,EAAY,GACZC,EAAgB,GAEXC,EAAI,EAAGA,EAAIL,EAAKM,OAAQD,IAC7BF,EAAUI,KAAKF,GACfD,EAAcG,KAAKN,GAEvB,IAAIO,EAAUC,KAAKC,IAAL,MAAAD,KAAI,YAAQT,IAASS,KAAKE,IAAL,MAAAF,KAAI,YAAQT,IAAQ,IACnDQ,EAAU,IAAGA,EAAU,GAC3B,IAAMI,EAAUH,KAAKE,IAAL,MAAAF,KAAI,YAAQT,IAASS,KAAKE,IAAL,MAAAF,KAAI,YAAQT,IAAQ,IACzDH,EAAc,IAAIgB,IAAMC,SAASC,eAAe,cAAe,CAC3DC,KAAM,OACNC,QAAS,CACLC,WAAW,EACXC,iBAAkB,EAClBC,YAAa,EACbC,iBAAkB,EAClBC,YAAa,EACbC,OAAQ,CAEJC,MAAO,CACHC,SAAS,GAGbC,MAAO,CACHhB,IACIF,EAEJG,IACIC,EAEJe,KAAM,CACFC,YAAY,GAIhBC,MAAO,CACHC,aAAa,EACbC,SAAU,GACVC,UAAW,YACXC,cAAe,EACfC,QAAS,KAIjBC,OAAQ,CACJnB,KAAM,SACNS,SAAS,EACTW,SAAU,QAEV1B,IACIF,EAEJG,IACIC,EAEJe,KAAM,CACFC,YAAY,GAIhBC,MAAO,CACHC,aAAa,EACbC,SAAU,GACVC,UAAW,MACXC,cAAe,EACfC,QAAS,MAMrBG,QAAS,CACLC,OAAQ,CACJb,SAAS,GAEbc,QAAS,CACLd,SAAS,EACTe,SAAS,EACTC,KAAM,YAKlBzC,KAAM,CACF0C,OAAQvC,EACRwC,SAAU,CAAC,CACPJ,SAAS,EACTvC,KAAMA,EACN4C,MAAO,SACPC,YAAa,UACbC,MAAM,EACNC,QAAS,SACX,CACER,SAAS,EACTvC,KAAMI,EACNwC,MAAO,UACPC,YAAa,MACbC,MAAM,EACNC,QAAS,eAaZC,EAAe,WACxBnD,EAAYK,W,wBEnHH+C,EAAiC,SAACC,EAAalD,EAAMmD,GAC9D,GAAIrC,SAASsC,cAAc,oBAAqB,CAC5C,IAAK,IAAI/C,EAAI8C,EAAcE,MAAOhD,EAAK,IAAM8C,EAAcE,MAAQhD,IAC/D6C,EAAY3C,KAAKP,EAAKK,IAE1B6C,EAAYI,MAAMH,EAAcE,MAAO,IAAMF,EAAcE,OFuGvCE,EEtGRL,EFsGgBM,EEtGHL,EAAclD,cFuGvCJ,EAAYG,OACZH,EAAYK,UACZH,EAAMwD,EAAQC,IAHK,IAACD,EAAQC,GElGvBC,EAAqB,SAACP,EAAaQ,EAAiBP,GAC7D,IAAMQ,EAAYT,EAAYA,EAAY5C,OAAS,GACnD6C,EAAcS,aAAeD,EAC7BD,EAAgBC,IAwCPE,EAAO,uCAAG,WAAOC,EAAeX,EAAeY,EAAUC,GAA/C,eAAAC,EAAA,sDACgB,IAA/Bd,EAAce,eACVC,EAAUhB,EAAciB,aAAejB,EAAcS,aAAgBT,EAAckB,IACvFlB,EAAce,aAAgBf,EAAciB,aAAejB,EAAcS,aACrET,EAAce,aAAe,IAAGf,EAAce,cAA6C,EAA9Bf,EAAce,cAC/Ef,EAAce,aAAef,EAAce,aAAeC,GAE9DL,EAAc,CAAEI,aAAcf,EAAce,aAAcI,WAAYnB,EAAcmB,aAChFN,GAASO,cAAcP,GAC3BD,EAAS,KATU,2CAAH,4DCzDL,MAA0B,gCCA1B,MAA0B,gCCA1B,MAA0B,gCCA1B,MAA0B,gCCA1B,MAA0B,gCCA1B,MAA0B,gCCO5BS,EAAQ,uCAAI,WAAOC,EAAeH,GAAtB,eAAAL,EAAA,sDAEvBS,QAAQC,IAAIL,GACO,YAAfA,EAA0BM,EAAcC,EACpB,QAAfP,EAAqBM,EAAcE,EACpB,QAAfR,EAAqBM,EAAcG,EACpB,UAAfT,EAAuBM,EAAcI,EACtB,WAAfV,EAAwBM,EAAaK,EACtB,QAAfX,IAAqBM,EAAaM,GAEzCC,MAAMP,GACNQ,MAAK,SAAAC,GAAC,OAAIA,EAAEC,UACZF,MAAK,SAAAE,GACJ,IAAIC,EAAYC,KAAKC,MAAMH,GAC3BI,EAAWjB,EAAiBc,MAdR,2CAAJ,wDAiBZG,EAAa,SAACjB,EAAgBc,GAClC,IAAII,EAAeJ,EAAWK,MAC1BC,EAAOpF,KAAKqF,UAAYH,EAAarF,OAAS,KAEjDmE,EADDkB,EAAeA,EAAarC,MAAMuC,EAAMA,EAAM,O,OCpB/CE,GAAY,EACZ5C,EAAiB,CAACE,MAAM,GAsFb2C,EArFF,SAAC,GAAkC,IAAjCC,EAAgC,EAAhCA,WAAanC,EAAmB,EAAnBA,cACxB,EAAsCoC,qBAAtC,mBAAOC,EAAP,KAAoB1B,EAApB,KACMV,EAAWqC,cAOrBC,qBAAU,WACN,IAAInC,EAAe,EACnB,GAAK6B,EAULO,OAAOC,aAAaC,QAAQ,WAAWP,EAAW/B,cAClDA,EAAe+B,EAAW/B,iBAXX,CACX6B,GAAY,EACZrB,QAAQC,IAAI2B,OAAOC,cACvB,IAAIA,EAAeD,OAAOC,aAAaE,QAAQ,YAC1CF,GAEDzC,EAAc,CAACI,aAAeqC,EAAcjC,WAAa2B,EAAW3B,aACpEJ,EAAeqC,GAHAD,OAAOC,aAAaC,QAAQ,WAAWP,EAAW/B,cASpD,IAAjBA,IACAJ,EAAc,CAACI,aAAe,IAAMI,WAAa2B,EAAW3B,aAC5DgC,OAAOC,aAAaC,QAAQ,WAAW,MAE3CrD,EAAcE,MAAQ,EAElBmB,EAASC,EAAe,aAEzB,IAEH4B,qBAAU,WACL,GAAIF,EAAa,CAElB,IADA,IAAIO,EAAc,GACTrG,EAAI,EAAGA,EAAI,IAAKA,IACrBqG,EAAYnG,KAAK4F,EAAY9F,IAEjC8C,EAAcE,MAAQ,EAEtBtD,EAAM2G,EAAavD,EAAcS,cACjC+C,OAEF,CAACR,IAEH,IAAMQ,EAAgB,WAClB,IAAM3C,EAAW4C,aAAY,WACpB9F,SAASsC,cAAc,WACxBJ,IACAuB,cAAcP,IAIlBf,EAFkB,GAE0BkD,EAAahD,KAE1D,KACH,OAAO,kBAAMoB,cAAcP,KAE3B,OACI,sBAAK6C,UAAY,OAAjB,UACK,4CACA,sBAAKA,UAAU,eAAf,UACD,qBAAKA,UAAY,eAAjB,SACI,gCACA,yCACA,8BAAK,8BAAIZ,EAAW/B,aAAf,cAGT,gCACA,uBAAO4C,QAAU,SAAjB,sBACI,yBAAQC,GAAI,SAASC,SArEZ,SAACC,GAClBnD,EAAc,CAACI,aAAe+B,EAAW/B,aAAcI,WAAa2C,EAAEC,OAAOC,SAoErE,cACErH,EAAWsH,KAAI,SAACC,EAAUhE,GACxB,OAAO,wBAAuB8D,MAASE,EAAhC,SAAyCA,GAA1BhE,eAKlC,qBAAKwD,UAAY,OAAOS,QAzEb,WACbvD,EAAS,gBAwEP,SAA4C,2CChFhDZ,EAAgB,CAAEkB,IAAK,KAAOT,aAAc,EAAGP,MAAO,EAAGkE,UAAW,YAAaC,SAAU,WAAYC,WAAY,EAAGxH,cAAe,EAAGmE,aAAc,EAAGsD,iBAAkB,EAAGxD,aAAc,EAAGI,WAAY,OAwIhMqD,EAvII,SAAC,GAAmC,IAAjC1B,EAAgC,EAAhCA,WAAYnC,EAAoB,EAApBA,cAC9B,EAAsCoC,qBAAtC,mBAAOC,EAAP,KAAoB1B,EAApB,KACA,EAAwCyB,mBAAS,GAAjD,mBAAOhC,EAAP,KAAqB0D,EAArB,KACA,EAAwC1B,mBAAS,GAAjD,mBAAOtC,EAAP,KAAqBF,EAArB,KACA,EAAkCwC,mBAAS,aAA3C,mBAAOqB,EAAP,KAAkBM,EAAlB,KACA,EAAgC3B,mBAAS,YAAzC,mBAAOsB,EAAP,KAAiBM,EAAjB,KACA,EAAkC5B,mBAAS,eAA3C,mBAAO6B,EAAP,KAAkBC,EAAlB,KACA,EAAwC9B,mBAAS,GAAjD,mBAAO9B,EAAP,KAAqB6D,EAArB,KACA,EAAoC/B,mBAAS,GAA7C,mBAAOuB,EAAP,KAAmBS,EAAnB,KACA,EAAwBhC,mBAAS,GAAjC,mBAAOiC,EAAP,KAAaC,EAAb,KACA,EAAkClC,mBAAS,GAA3C,mBAAOmC,EAAP,KAAkBC,EAAlB,KACMvE,GAAWqC,cACjBC,qBAAU,WACN7B,EAASC,EAAewB,EAAW3B,cACpC,IACH+B,qBAAU,WACN,GAAIF,EAAa,CAEb,IADA,IAAIO,EAAc,GACTrG,EAAI,EAAGA,EAAI,IAAKA,IACrBqG,EAAYnG,KAAK4F,EAAY9F,IAEjC8C,EAAcE,MAAQ,EACtBiF,EAAa,GACb7E,EAAmBiD,EAAahD,EAAiBP,GACjDpD,EAAM2G,EAAavD,EAAcS,cACjCT,EAAce,aAAe+B,EAAW/B,aACxCf,EAAcmB,WAAa2B,EAAW3B,WACtCsD,EAAgB3B,EAAW/B,cAC3ByC,QAEL,CAACR,IACJ,IAAMQ,GAAgB,WAClB,IAAM3C,EAAW4C,aAAY,WACpB9F,SAASsC,cAAc,sBACxBJ,IACAuB,cAAcP,IAElBb,EAAcE,QACdiF,EAAanF,EAAcE,OAC3B,ITRoBF,ESQhBD,EAAc,GAClBD,EAA+BC,EAAaiD,EAAahD,GACzDM,EAAmBP,EAAaQ,EAAiBP,GTTxB,KADLA,ESWJA,GTVNsE,WACdtE,EAAclD,cAAgBkD,EAAcS,aAE5CT,EAAclD,cAAgBkD,EAAcsE,WAxB1B,SAACtE,EAAe6E,GACP,KAA3B7E,EAAcqE,UAEVrE,EAAcS,aAAeT,EAAcsE,YAC3CO,EAAa,SAEb7E,EAAcS,cAAgBT,EAAcsE,YAC5CO,EAAa,QAEkB,KAA5B7E,EAAcoE,WACjBpE,EAAcS,aAAeT,EAAcsE,YAC3CO,EAAa,OAEb7E,EAAcS,cAAgBT,EAAcsE,YAC5CO,EAAa,UAGjBA,EAAa,eSeTO,CAAWpF,EAAe6E,GTJZ,SAACI,EAASjF,GAC5BA,EAAcsE,WAAa,GAAgC,KAA3BtE,EAAcqE,SAC9CY,GAAUjF,EAAcS,aAAeT,EAAcsE,YAActE,EAAciB,aAAgBjB,EAAcuE,iBAAoBvE,EAAciB,aAAejB,EAAcS,aAAeT,EAAckB,KACpMlB,EAAcsE,WAAa,GAAiC,KAA5BtE,EAAcoE,UACrDa,GAAUjF,EAAcsE,WAAatE,EAAcS,eAAkBT,EAAciB,aAAiBjB,EAAcuE,mBAAsBvE,EAAciB,aAAejB,EAAcS,aAAeT,EAAckB,KAEhN+D,EAAQ,GSDJI,CAAWJ,EAASjF,GAChBA,EAAcE,OAAS,KACvBQ,EAAQC,EAAeX,EAAeY,GAAUC,KAErD,KACH,OAAO,kBAAMO,cAAcP,KA4D/B,OACI,uBAAM6C,UAAU,mBAAhB,UACI,oCACI,gCACI,qBAAIA,UAAU,gBAAd,4BAA8CjD,EAA9C,OACA,qBAAIiD,UAAW,SAAWkB,EAA1B,wBAAmDN,KACnD,qBAAIZ,UAAU,OAAd,oBAA8BsB,EAA9B,UAEJ,gCACI,qBAAItB,UAAU,aAAd,sBAAqC3C,EAArC,QAAwDE,EAAxD,IAAuE6B,EAAW3B,cAClF,gDACA,qBAAIuC,UAAU,QAAd,UAAuBwB,EAAvB,kBAGR,qBAAKxB,UAAU,QAAf,SACI,wBAAQE,GAAG,aAAa0B,MAAM,MAAMC,OAAO,UAE/C,0BAAS7B,UAAU,WAAnB,UACI,qBAAKA,UAAU,eAAeS,QA3EvB,WACf,GAAInE,EAAce,aAAe,EAAG,CAChCf,EAAcuE,iBAAoBzB,EAAW/B,aAAef,EAAckB,IAC1E,IAAMsE,GAAqB1C,EAAW/B,aAAgB+B,EAAW/B,aAAef,EAAckB,KAAQT,EACtGqE,EAAgBU,GAChBxF,EAAciB,aAAeuE,EAC7BxF,EAAce,aAAe,EAC7B0D,EAAgB,GAChBC,EAAa,QACb1E,EAAcoE,UAAY,OAC1BO,EAAY,IACZ3E,EAAcqE,SAAW,GACzBU,EAActE,GACdT,EAAcsE,WAAa7D,OACW,IAA/BT,EAAce,cAAsBE,EAAe,IAC1DjB,EAAce,cAAkBE,EAAgBR,EAAkBQ,EAAeR,EAAgBT,EAAckB,IAC/GuD,EAAgBzE,EAAce,cAC9B+D,EAAgB,GAChB9E,EAAciB,aAAe,EAC7ByD,EAAa,aACb1E,EAAcoE,UAAY,YAC1BO,EAAY,YACZ3E,EAAcqE,SAAW,WACzBU,EAAc,GACd/E,EAAcsE,WAAa,IAmDvB,SAAoDD,IACpD,qBAAKX,UAAU,iBAAiBS,QAtBzB,WACfzD,EAAQC,EAAeX,EAAeY,KAqB9B,kBACA,qBAAK8C,UAAU,cAAcS,QAlDrB,WAChB,GAAmC,IAA/BnE,EAAce,cAAsBE,EAAe,EACnDjB,EAAce,aAAeE,EAAeR,EAAiBQ,EAAeR,EAAgBT,EAAckB,IAC1GuD,EAAgBzE,EAAce,cAC9B+D,EAAgB,GAChB9E,EAAciB,aAAe,EAC7ByD,EAAa,aACb1E,EAAcoE,UAAY,YAC1BO,EAAY,YACZ3E,EAAcqE,SAAW,WACzBU,EAAc,GACd/E,EAAcsE,WAAa,OACxB,GAAItE,EAAce,aAAe,GAAsB,IAAjBE,EAAoB,CAC7DjB,EAAcuE,iBAAoBvE,EAAce,aAAef,EAAckB,IAC7E,IAAMsE,IAAsBxF,EAAce,aAAgBf,EAAce,aAAef,EAAckB,KAAQT,EAC7GqE,EAAgBU,GAChBxF,EAAciB,aAAeuE,EAC7BxF,EAAce,aAAe,EAC7B0D,EAAgB,GAChBC,EAAa,IACb1E,EAAcoE,UAAY,GAC1BO,EAAY,QACZ3E,EAAcqE,SAAW,OACzBU,EAActE,GACdT,EAAcsE,WAAa7D,IA0BvB,SAAoD2D,WC/HvDqB,G,MAAS,WACpB,MAAqC1C,mBAAS,CAAChC,aAAe,IAAMI,WAAa,YAAjF,mBAAO2B,EAAP,KAAoBnC,EAApB,KACA,OACI,mCACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAO+E,KAAK,IAAIC,QAAS,cAAC,EAAD,CAAM7C,WAAYA,EAAYnC,cAAgBA,MACvE,cAAC,IAAD,CAAO+E,KAAK,cAAcC,QAAS,cAAC,EAAD,CAAa7C,WAAYA,EAAYnC,cAAgBA,aAcjFiF,MATf,WAEE,OACE,cAAC,IAAD,UACE,cAAC,EAAD,OCdSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB9D,MAAK,YAAkD,IAA/C+D,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF5I,SAASC,eAAe,SAM1BiI,M","file":"static/js/main.417ff7aa.chunk.js","sourcesContent":["\r\nimport Chart from \"chart.js/auto\"\r\n\r\n let cryptoChart\r\nexport const chart = (data,tickPriceData) => {\r\n    if (cryptoChart )cryptoChart.destroy();\r\n    let dataLabel = []\r\n    let referenceLine = []\r\n\r\n    for (let i = 0; i < data.length; i++) {\r\n        dataLabel.push(i)\r\n        referenceLine.push(tickPriceData)\r\n    }\r\n    let dataMin = Math.min(...data) - (Math.max(...data) / 1000)\r\n    if (dataMin < 0) dataMin = 0\r\n    const dataMax = Math.max(...data) + (Math.max(...data) / 1000)\r\n    cryptoChart = new Chart(document.getElementById(\"line-chart\"), {\r\n        type: 'line',\r\n        options: {\r\n            animation: false,\r\n            pointBorderWidth: 0,\r\n            pointRadius: 0,\r\n            hoverBorderWidth: 0,\r\n            hoverRadius: 0,\r\n            scales: {\r\n\r\n                xAxis: {\r\n                    display: false,\r\n                },\r\n\r\n                yAxis: {\r\n                    min:\r\n                        dataMin\r\n                    ,\r\n                    max:\r\n                        dataMax\r\n                    ,\r\n                    grid: {\r\n                        drawBorder: false,\r\n\r\n\r\n                    },\r\n                    ticks: {\r\n                        beginAtZero: false,\r\n                        fontSize: 15,\r\n                        fontColor: 'lightgrey',\r\n                        maxTicksLimit: 5,\r\n                        padding: 25,\r\n                    },\r\n\r\n                },\r\n                yAxis1: {\r\n                    type: 'linear',\r\n                    display: false,\r\n                    position: 'right',\r\n            \r\n                    min:\r\n                        dataMin\r\n                    ,\r\n                    max:\r\n                        dataMax\r\n                   ,\r\n                    grid: {\r\n                        drawBorder: false,\r\n\r\n\r\n                    },\r\n                    ticks: {\r\n                        beginAtZero: false,\r\n                        fontSize: 15,\r\n                        fontColor: 'red',\r\n                        maxTicksLimit: 1,\r\n                        padding: 25,\r\n                    },\r\n\r\n                }\r\n\r\n            },\r\n            plugins: {\r\n                legend: {\r\n                    display: false,\r\n                },\r\n                tooltip: {\r\n                    display: false,\r\n                    enabled: false,\r\n                    mode: 'single',\r\n\r\n                },\r\n            }\r\n        },\r\n        data: {\r\n            labels: dataLabel,\r\n            datasets: [{\r\n                tooltip: false,\r\n                data: data,\r\n                label: \"crytpo\",\r\n                borderColor: \"#3e95cd\",\r\n                fill: false,\r\n                yAxisID: 'yAxis',\r\n            },{\r\n                tooltip: false,\r\n                data: referenceLine,\r\n                label: \"crytpo2\",\r\n                borderColor: \"red\",\r\n                fill: false,\r\n                yAxisID: 'yAxis1',\r\n            }]\r\n            \r\n        },\r\n\r\n    });\r\n}\r\nexport const chartUpdate = (newData,dynamicCurrentPrice) => {\r\n    if (cryptoChart.data) {\r\n        cryptoChart.destroy();\r\n        chart(newData,dynamicCurrentPrice)\r\n    }\r\n}\r\nexport const chartDestroy = () => {\r\n    cryptoChart.destroy();\r\n}","export const cryptolist = [\"Bitcoin\",\"ADA\",\"Ether\",\"BNB\",\"Solana\",'XRP',]","\r\nimport { chartUpdate } from \"./chartConfig\"\r\n\r\n\r\nexport const generateNewDatasAndUpdateChart = (currentData, data, dynamicValues) => {\r\n    if (document.querySelector('.playground-main')) {\r\n        for (let i = dynamicValues.index; i < (500 + dynamicValues.index); i++) {\r\n            currentData.push(data[i])\r\n        }\r\n        currentData.slice(dynamicValues.index, 500 + dynamicValues.index)\r\n        chartUpdate(currentData, dynamicValues.tickPriceData)\r\n    }\r\n}\r\n\r\nexport const updateCurrentPrice = (currentData, setCurrentPrice, dynamicValues) => {\r\n    const lastPrice = currentData[currentData.length - 1]\r\n    dynamicValues.currentPrice = lastPrice\r\n    setCurrentPrice(lastPrice)\r\n\r\n}\r\nexport const updateFlag = (dynamicValues, setFlagColor) => {\r\n    if (dynamicValues.longSell === '') {\r\n\r\n        if (dynamicValues.currentPrice > dynamicValues.orderPrice) {\r\n            setFlagColor('green')\r\n        }\r\n        if (dynamicValues.currentPrice <= dynamicValues.orderPrice) {\r\n            setFlagColor('red')\r\n        }\r\n    } else if (dynamicValues.sellShort === '') {\r\n        if (dynamicValues.currentPrice > dynamicValues.orderPrice) {\r\n            setFlagColor('red')\r\n        }\r\n        if (dynamicValues.currentPrice <= dynamicValues.orderPrice) {\r\n            setFlagColor('green')\r\n        }\r\n    } else {\r\n        setFlagColor('transparent')\r\n    }\r\n}\r\nexport const updateTickPrice = (dynamicValues) => {\r\n    if (dynamicValues.orderPrice === 0) {\r\n        dynamicValues.tickPriceData = dynamicValues.currentPrice\r\n    } else {\r\n        dynamicValues.tickPriceData = dynamicValues.orderPrice\r\n    }\r\n\r\n}\r\nexport const updateGain = (setGain, dynamicValues) => {\r\n    if (dynamicValues.orderPrice > 0 && dynamicValues.longSell === '') {\r\n        setGain(((dynamicValues.currentPrice - dynamicValues.orderPrice) * dynamicValues.playerCrypto) - dynamicValues.playerCurrentFee - (dynamicValues.playerCrypto * dynamicValues.currentPrice * dynamicValues.fee))\r\n    } else if (dynamicValues.orderPrice > 0 && dynamicValues.sellShort === '') {\r\n        setGain(((dynamicValues.orderPrice - dynamicValues.currentPrice) * (-dynamicValues.playerCrypto)) - dynamicValues.playerCurrentFee - (- dynamicValues.playerCrypto * dynamicValues.currentPrice * dynamicValues.fee))\r\n    } else {\r\n        setGain(0)\r\n    }\r\n}\r\nexport const endGame = async (setStateDatas, dynamicValues, navigate, interval) => {\r\n    if (dynamicValues.playerMonney === 0) {\r\n        let newFee = (dynamicValues.playerCrypto * dynamicValues.currentPrice) * dynamicValues.fee\r\n        dynamicValues.playerMonney = (dynamicValues.playerCrypto * dynamicValues.currentPrice)\r\n        if (dynamicValues.playerMonney < 0) dynamicValues.playerMonney = dynamicValues.playerMonney * -1\r\n        dynamicValues.playerMonney = dynamicValues.playerMonney - newFee\r\n    }\r\n    setStateDatas({ playerMonney: dynamicValues.playerMonney, cryptoUnit: dynamicValues.cryptoUnit })\r\n    if (interval)clearInterval(interval)\r\n    navigate('/')\r\n}","export default __webpack_public_path__ + \"static/media/BTC.82585eb7.txt\";","export default __webpack_public_path__ + \"static/media/ADA.8e5834d5.txt\";","export default __webpack_public_path__ + \"static/media/BNB.f42ca6e8.txt\";","export default __webpack_public_path__ + \"static/media/ETH.1269a9e2.txt\";","export default __webpack_public_path__ + \"static/media/SOL.360b1f16.txt\";","export default __webpack_public_path__ + \"static/media/XRP.4f902e13.txt\";","import BTC from '../../data/BTC.txt'\r\nimport ADA from '../../data/ADA.txt'\r\nimport BNB from '../../data/BNB.txt'\r\nimport ETH from '../../data/ETH.txt'\r\nimport SOL from '../../data/SOL.txt'\r\nimport XRP from '../../data/XRP.txt'\r\n\r\nexport const showFile =  async (setCryptoDatas,cryptoUnit ) => {\r\n  let cryptoData \r\n  console.log(cryptoUnit)\r\n  if (cryptoUnit === 'bitcoin' )cryptoData  = BTC\r\n  else if (cryptoUnit === 'ADA')cryptoData  = ADA\r\n  else if (cryptoUnit === 'BNB')cryptoData  = BNB\r\n  else if (cryptoUnit === 'Ether')cryptoData  = ETH\r\n  else if (cryptoUnit === 'Solana')cryptoData = SOL\r\n  else if (cryptoUnit === 'XRP')cryptoData = XRP\r\n\r\n    fetch(cryptoData )\r\n   .then(r => r.text())\r\n   .then(text => {\r\n     let bufferText =JSON.parse(text)\r\n     randomData(setCryptoDatas , bufferText)\r\n   });\r\n   }\r\n   const randomData = (setCryptoDatas ,bufferText ) => {\r\n     let randomValues = bufferText.array\r\n     let rnd  = Math.random() * (randomValues.length - 10000)\r\n     randomValues = randomValues.slice(rnd  ,rnd + 10000 )\r\n      setCryptoDatas(randomValues)\r\n   }","import React, { useEffect,useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { cryptolist } from '../../data/CryptoList';\r\nimport { chart, chartDestroy } from '../depedances/chartConfig';\r\nimport { generateNewDatasAndUpdateChart, updateCurrentPrice } from '../depedances/gameLoop';\r\nimport { showFile } from '../depedances/txtToObject';\r\n\r\nlet startSoft = false\r\nlet dynamicValues  = {index:0}\r\nconst Menu = ({stateDatas , setStateDatas}) => { \r\n    const [cryptoDatas, setCryptoDatas] = useState()\r\n    const navigate = useNavigate()\r\n    const selectCrypto = (e) => {\r\n        setStateDatas({playerMonney : stateDatas.playerMonney ,cryptoUnit : e.target.value})\r\n    }\r\n  const playGame = () => {\r\n      navigate('/playground')\r\n  }\r\nuseEffect(() => {\r\n    let playerMonney = 0\r\n    if (!startSoft){\r\n        startSoft = true\r\n        console.log(window.localStorage)\r\n    let localStorage = window.localStorage.getItem('myWallet')\r\n    if (!localStorage) window.localStorage.setItem('myWallet',stateDatas.playerMonney)\r\n    else {\r\n        setStateDatas({playerMonney : localStorage ,cryptoUnit : stateDatas.cryptoUnit}) \r\n        playerMonney = localStorage\r\n    }\r\n}else{\r\n    window.localStorage.setItem('myWallet',stateDatas.playerMonney)\r\n    playerMonney = stateDatas.playerMonney\r\n}\r\nif (playerMonney === 0) {\r\n    setStateDatas({playerMonney : 1000 ,cryptoUnit : stateDatas.cryptoUnit})\r\n    window.localStorage.setItem('myWallet',1000)\r\n}\r\ndynamicValues.index = 0\r\n\r\n    showFile(setCryptoDatas,'bitcoin')\r\n\r\n}, [])\r\n\r\nuseEffect(() => {\r\n     if (cryptoDatas) {\r\n    let bufferDatas = []\r\n    for (let i = 0; i < 500; i++) {\r\n        bufferDatas.push(cryptoDatas[i])\r\n    }\r\n    dynamicValues.index = 0\r\n    \r\n    chart(bufferDatas, dynamicValues.currentPrice)\r\n    loopControler()\r\n}\r\n},[cryptoDatas])\r\n\r\nconst loopControler = () => {\r\n    const interval = setInterval(() => {\r\n        if (!document.querySelector('.menu')) {\r\n            chartDestroy()\r\n            clearInterval(interval)\r\n        }\r\n        let currentData = []\r\n        \r\n        generateNewDatasAndUpdateChart(currentData, cryptoDatas, dynamicValues)\r\n        \r\n    }, 200)\r\n    return () => clearInterval(interval);\r\n}\r\n    return (\r\n        <div className = \"menu\">\r\n             <h1>CryptoGame</h1>\r\n             <div className=\"main-section\">\r\n            <div className = \"left-section\">\r\n                <div>\r\n                <p>Wallet :</p>\r\n                <div><p>{stateDatas.playerMonney}$</p></div>\r\n                </div>\r\n            </div>\r\n            <div>\r\n            <label htmlFor = \"crypto\">Crypto :</label>\r\n                <select id =\"crypto\" onChange ={selectCrypto} >\r\n                ${cryptolist.map((crypto ,  index)=> {\r\n                    return <option key = {index}  value = {crypto}>{crypto}</option>\r\n                })}\r\n                </select>\r\n        </div>\r\n        </div>\r\n        <div className = \"play\" onClick ={playGame}><p>Play</p></div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Menu;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nimport { chart, chartDestroy } from '../depedances/chartConfig';\r\nimport { endGame, generateNewDatasAndUpdateChart, updateCurrentPrice, updateFlag, updateGain, updateTickPrice } from '../depedances/gameLoop';\r\nimport { showFile } from '../depedances/txtToObject';\r\n\r\n\r\nlet dynamicValues = { fee: 0.004, currentPrice: 0, index: 0, sellShort: 'Buy Short', longSell: 'Buy Long', orderPrice: 0, tickPriceData: 0, playerCrypto: 0, playerCurrentFee: 0, playerMonney: 0, cryptoUnit: 'btc' }\r\nconst Playground = ({ stateDatas, setStateDatas }) => {\r\n    const [cryptoDatas, setCryptoDatas] = useState()\r\n    const [playerMonney, setPlayerMonney] = useState(0)\r\n    const [currentPrice, setCurrentPrice] = useState(0)\r\n    const [sellShort, setSellShort] = useState('Buy Short')\r\n    const [longSell, setLongSell] = useState('Buy Long')\r\n    const [flagColor, setFlagColor] = useState('transparent')\r\n    const [playerCrypto, setPlayerCrypto] = useState(0)\r\n    const [orderPrice, setOrderPrice] = useState(0)\r\n    const [gain, setGain] = useState(0)\r\n    const [drawIndex, setDrawIndex] = useState(0)\r\n    const navigate = useNavigate()\r\n    useEffect(() => {\r\n        showFile(setCryptoDatas,stateDatas.cryptoUnit)\r\n    }, [])\r\n    useEffect(() => {\r\n        if (cryptoDatas) {\r\n            let bufferDatas = []\r\n            for (let i = 0; i < 500; i++) {\r\n                bufferDatas.push(cryptoDatas[i])\r\n            }\r\n            dynamicValues.index = 0\r\n            setDrawIndex(0)\r\n            updateCurrentPrice(bufferDatas, setCurrentPrice, dynamicValues)\r\n            chart(bufferDatas, dynamicValues.currentPrice)\r\n            dynamicValues.playerMonney = stateDatas.playerMonney\r\n            dynamicValues.cryptoUnit = stateDatas.cryptoUnit\r\n            setPlayerMonney(stateDatas.playerMonney)\r\n            loopControler()\r\n        }\r\n    }, [cryptoDatas])\r\n    const loopControler = () => {\r\n        const interval = setInterval(() => {\r\n            if (!document.querySelector('.playground-main')) {\r\n                chartDestroy()\r\n                clearInterval(interval)\r\n            }\r\n            dynamicValues.index++\r\n            setDrawIndex(dynamicValues.index)\r\n            let currentData = []\r\n            generateNewDatasAndUpdateChart(currentData, cryptoDatas, dynamicValues)\r\n            updateCurrentPrice(currentData, setCurrentPrice, dynamicValues)\r\n            updateTickPrice(dynamicValues)\r\n            updateFlag(dynamicValues, setFlagColor)\r\n            updateGain(setGain, dynamicValues)\r\n            if (dynamicValues.index >= 10000) {\r\n                endGame(setStateDatas, dynamicValues, navigate, interval)\r\n            }\r\n        }, 200)\r\n        return () => clearInterval(interval);\r\n    }\r\n\r\n    const longOrSell = () => {\r\n        if (dynamicValues.playerMonney > 0) {\r\n            dynamicValues.playerCurrentFee = (stateDatas.playerMonney * dynamicValues.fee)\r\n            const transactionResult = (stateDatas.playerMonney - (stateDatas.playerMonney * dynamicValues.fee)) / currentPrice\r\n            setPlayerCrypto(transactionResult)\r\n            dynamicValues.playerCrypto = transactionResult\r\n            dynamicValues.playerMonney = 0\r\n            setPlayerMonney(0)\r\n            setSellShort('Sell')\r\n            dynamicValues.sellShort = 'Sell'\r\n            setLongSell('')\r\n            dynamicValues.longSell = ''\r\n            setOrderPrice(currentPrice)\r\n            dynamicValues.orderPrice = currentPrice\r\n        } else if (dynamicValues.playerMonney === 0 && playerCrypto < 0) {\r\n            dynamicValues.playerMonney = - (playerCrypto *  currentPrice ) - (playerCrypto * currentPrice  * dynamicValues.fee)\r\n            setPlayerMonney(dynamicValues.playerMonney)\r\n            setPlayerCrypto(0)\r\n            dynamicValues.playerCrypto = 0\r\n            setSellShort('Buy Short')\r\n            dynamicValues.sellShort = 'Buy Short'\r\n            setLongSell('Buy Long')\r\n            dynamicValues.longSell = 'Buy Long'\r\n            setOrderPrice(0)\r\n            dynamicValues.orderPrice = 0\r\n        }\r\n    }\r\n    const shortOrSell = () => {\r\n        if (dynamicValues.playerMonney === 0 && playerCrypto > 0) {\r\n            dynamicValues.playerMonney = playerCrypto * currentPrice - ((playerCrypto * currentPrice) * dynamicValues.fee)\r\n            setPlayerMonney(dynamicValues.playerMonney)\r\n            setPlayerCrypto(0)\r\n            dynamicValues.playerCrypto = 0\r\n            setSellShort('Buy Short')\r\n            dynamicValues.sellShort = 'Buy Short'\r\n            setLongSell('Buy Long')\r\n            dynamicValues.longSell = 'Buy Long'\r\n            setOrderPrice(0)\r\n            dynamicValues.orderPrice = 0\r\n        } else if (dynamicValues.playerMonney > 0 && playerCrypto === 0) {\r\n            dynamicValues.playerCurrentFee = (dynamicValues.playerMonney * dynamicValues.fee)\r\n            const transactionResult = -(dynamicValues.playerMonney - (dynamicValues.playerMonney * dynamicValues.fee)) / currentPrice\r\n            setPlayerCrypto(transactionResult)\r\n            dynamicValues.playerCrypto = transactionResult\r\n            dynamicValues.playerMonney = 0\r\n            setPlayerMonney(0)\r\n            setSellShort('')\r\n            dynamicValues.sellShort = ''\r\n            setLongSell('Sell')\r\n            dynamicValues.longSell = 'Sell'\r\n            setOrderPrice(currentPrice)\r\n            dynamicValues.orderPrice = currentPrice\r\n        }\r\n    }\r\n    const returnMenu = () => {\r\n        endGame(setStateDatas, dynamicValues, navigate)\r\n    }\r\n    return (\r\n        <main className=\" playground-main\">\r\n            <section>\r\n                <div>\r\n                    <h2 className=\"current-price\">current price :{currentPrice}$</h2>\r\n                    <h2 className={\"order \" + flagColor}  >Order at : {orderPrice}</h2>\r\n                    <h2 className=\"gain\" >Gain : {gain}$</h2>\r\n                </div>\r\n                <div>\r\n                    <h2 className=\"user-money\">monney : {playerMonney} $ / {playerCrypto} {stateDatas.cryptoUnit}</h2>\r\n                    <h2> fee : 0.004% </h2>\r\n                    <h2 className=\"index\">{drawIndex}/10000</h2>\r\n                </div>\r\n            </section>\r\n            <div className=\"chart\">\r\n                <canvas id=\"line-chart\" width=\"800\" height=\"450\"></canvas>\r\n            </div>\r\n            <section className=\"buy-sell\">\r\n                <div className=\"sell-btn btn\" onClick={longOrSell}>{longSell}</div>\r\n                <div className=\"return-btn btn\" onClick={returnMenu}>Menu</div>\r\n                <div className=\"buy-btn btn\" onClick={shortOrSell}>{sellShort}</div>\r\n            </section>\r\n        </main>\r\n    );\r\n}\r\n\r\nexport default Playground;\r\n","import React, { useState } from 'react';\nimport{\n  BrowserRouter,\nRoutes,\nRoute,\nHashRouter,\n} from \"react-router-dom\";\nimport Menu from './composants/Pages/Menu';\nimport Playground from './composants/Pages/Playground';\nimport './style/style.css'\n\nexport const Switch = () => {\n  const [stateDatas , setStateDatas] = useState({playerMonney : 1000 ,cryptoUnit : 'bitcoin'}) //state data array for entire application\n  return (\n      <>\n      <Routes>\n        <Route path=\"/\" element={<Menu stateDatas={stateDatas} setStateDatas ={setStateDatas} />} />\n        <Route path=\"/playground\" element={<Playground  stateDatas={stateDatas} setStateDatas ={setStateDatas}  />} />\n      </Routes>\n      </>\n  )\n};\nfunction App() {\n  \n  return (\n    <HashRouter>\n      <Switch />\n    </HashRouter>\n  );\n}\n\nexport default App;\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}